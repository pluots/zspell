---

# Main "useful" actions config file
# Cache config comes from https://github.com/actions/cache/blob/main/examples.md#rust---cargo
# actions-rs/toolchain configures rustup
# actions-rs/cargo actually runs cargo

on:
  push:
    branches:
    - main
  pull_request:

name: Rust Validation

env:
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: -D warnings
  CARGO_UNSTABLE_SPARSE_REGISTRY: true

jobs:
  build_test:
    name: "Build ${{ matrix.build }} binaries (cargo build)"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: linux x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            # target: x86_64-unknown-linux-musl
            extension: ''
          - build: linux ARM hardfloat
            os: ubuntu-latest
            target: arm-unknown-linux-gnueabihf
            extension: ''
            # Unsuccessful compilation; try on local
          # - build: linux-arm
          #   os: ubuntu-latest
          #   target: arm-unknown-linux-gnueabihf
          #   extension: ''
          - build: macos x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            extension: ''
          - build: macos aarch64
            os: macos-latest
            target: aarch64-apple-darwin
            extension: ''
          - build: windows msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc
            extension: .exe
          - build: windows gnu
            os: windows-latest
            target: x86_64-pc-windows-gnu
            extension: .exe
    env:
      CARGO: cargo
      TARGET_DIR: ./target
      TARGET_FLAGS: ""

    steps:
        # Retreive git files
      - uses: actions/checkout@v3
        # Set cache configuration
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      # - name: Install System Requirements
      #   run: |
      #     if [ "${{ matrix.os }}" = "ububtu-latest" ]; then
      #       sudo apt-get install musl-tools libssl-dev
      #     fi
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
        # Debugging aid
      - name: Show commands
        run: |
          echo pwd:
          pwd
          echo ls:
          ls
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"
        # Perform build
      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          # We only want to build zspell-cli, not plain zspell or zspell-py (does not support cdylib)
          args: --package zspell-cli --verbose --target ${{ matrix.target }}
      - name: List files
        run: |
          ls target
          ls target/${{ matrix.target }}

  check:
    name: "Check (cargo check)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check
      - uses: actions-rs/cargo@v1
        # check with all features
        with:
          command: check
          args: --all-features --all-targets

  test:
    strategy:
        fail-fast: true
        matrix:
          os: [ubuntu-latest, windows-latest, macos-latest]
          include:
            - os: ubuntu-latest
              name: linux
            - os: windows-latest
              name: windows
            - os: macos-latest
              name: mac

    name: "Test on ${{ matrix.name }} (cargo test)"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: List files
        run: |
          pwd
          ls
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        env:
          RUST_BACKTRACE: "1"
        with:
          command: test

  fmt:
    name: "Format (cargo fmt)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - uses: actions/setup-python@v3
      - name: Validate pre-commit
        uses: pre-commit/action@v3.0.0

  clippy:
    name: "Clippy (cargo clippy)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          # Some nice checks are only nightly
          toolchain: nightly
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features --all-targets -- -D warnings

  doc:
    name: "Docs (cargo doc)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: doc

  book:
    name: "Book (mdbook)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/mdbook
            target/
            book/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: |
          mkdir -p ~/mdbook
          # Tar is weird with ~ as home
          curl -sSL https://github.com/rust-lang/mdBook/releases/download/v0.4.21/mdbook-v0.4.21-x86_64-unknown-linux-gnu.tar.gz \
          | tar -xz --directory=$(echo ~)/mdbook
      - run: ~/mdbook/mdbook test

  # Make sure we turned the clippy lint off
  verify_fixme_critical:
    name: "Verify critical fixmes"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: grep -r "FIXME:CRIT" --exclude-dir="target" --exclude-dir=".git" --exclude="validation-rust.yaml" && exit 1 || exit 0

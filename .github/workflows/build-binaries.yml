---
name: "Rust binaries: build and release"

# This configuration largely comes from ripgrep

# on:
#   push:
#     tags:
#     - 'v*'
on:
  pull_request:

jobs:
  build_release:
    name: "cargo-build: Build binaries on ${{ matrix.build }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            extension: ''
            # Unsuccessful compilation; try on local
          # - build: linux-arm
          #   os: ubuntu-latest
          #   target: arm-unknown-linux-gnueabihf
          #   extension: ''
          - build: macos
            os: macos-latest
            target: x86_64-apple-darwin
            extension: ''
          - build: windows-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc
            extension: .exe
    env:
      CARGO: cargo
      TARGET_DIR: ./target
      TARGET_FLAGS: ""

    steps:
        # Retreive git files
      - uses: actions/checkout@v2
        # Set cache configuration
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        # Install cargo
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
        # Debugging aid
      - name: Show commands
        run: |
          echo pwd:
          pwd
          echo ls:
          ls
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"
        # Perform build
      - uses: actions-rs/cargo@v1
        with:
          command: build
          # We only want to build zspell, not zspell_py (does not support cdylib)
          args: --package zspell --release --verbose --target ${{ matrix.target }}
        # Remove debug symbols
      - name: Strip release binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/${{ matrix.target }}/release/zspell"
        # Remove debug symbols
      - name: Strip release binary (arm)
        if: matrix.build == 'linux-arm'
        run: >
          docker run --rm -v
          "$PWD/target:/target:Z"
          rustembedded/cross:arm-unknown-linux-gnueabihf
          arm-linux-gnueabihf-strip
          /target/arm-unknown-linux-gnueabihf/release/zspell
        # Create .zip or .tar.gz file
      - name: Build archive
        shell: bash
        run: |
          echo pwd:
          pwd
          echo ls:
          ls
          # outdir="$(ci/cargo-out-dir "${{ env.TARGET_DIR }}")"
          outdir=target/release/${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}${{ matrix.extension }}
          staging="zspell-${{ needs.create-release.outputs.rg_version }}-${{ matrix.target }}"
          mkdir -p "$staging"/{complete,doc}
          cp {README.md,LICENSE} "$staging/"
          cp CHANGELOG.md "$staging/doc/"
          if [ "${{ matrix.os }}" = "windows" ]; then
            cp "target/${{ matrix.target }}/release/zspell.exe" "$staging/"
            7z a "$staging.zip" "$staging"
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
            cp "target/${{ matrix.target }}/release/zspell" "$staging/"
            tar czf "$staging.tar.gz" "$staging"
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi
        # Upload to github
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_REPOSITORY: pluots/zspell
        with:
          body_path: ${{ github.workspace }}-CHANGELOG.txt
          # note you'll typically need to create a personal access token
          # with permissions to create releases in the other repo
          token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
          files: |
            ${{ env.ASSET }}
